
open Lib.Infix

type t = {
  id : int option;

  title : string;
  slug : string;
  
  created : int;
  updated : int;
  publish : int;
  expires : int option;

  file_uri : Uri.t option;
  filename : string;
  md5 : string option;
  width : int option;
  height : int option;
  duration : int option;
  
  thumbnail_uri : Uri.t option;
  description : string option;
  tags : string list;
  custom : (string * string) list;

  cms_id : string option;
  link : Uri.t option;

  canonical : Source.t;
  sources : Source.t list;
} [@@deriving fields]

let sources_have_changed old knew =
  knew |> List.exists (fun k ->
    match List.find_opt (Source.are_same k) old with
    | None -> true
    | Some o -> Source.has_changed o k)

let has_changed ?(debug=false) ~check_md5 old knew =
  begin 
    if not debug then () else
    let chk name comp = 
      let status = if comp then "changed" else "same" in
      Printf.ksprintf (print_endline) "### [%s] %s: %s ###"
        old.canonical.media_id name status
    in
    
    let prtf name fl = 
      List.map (fun (k, v) -> Printf.sprintf "--> %s: %s" k v) fl
      |> String.concat "\n"
      |> Printf.ksprintf (print_endline) "### [%s] Fields of %s ###\n%s"
          old.canonical.media_id name
    in

    let tags = not @@ Util.items_are_same old.tags knew.tags in
    let cfields = not @@ Util.items_are_same old.custom knew.custom in
    let canon = Source.has_changed old.canonical knew.canonical in

    chk "title" (old.title <> knew.title);
    chk "slug" (old.slug <> knew.slug);
    chk "publish" (old.publish <> knew.publish);
    chk "expires" (old.expires <> knew.expires);
    if check_md5 then chk "md5" (old.md5 <> knew.md5);
    chk "duration" (old.duration <> knew.duration);
    chk "description" (old.description <> knew.description);
    chk "tags" tags;
    if tags then begin
      let fmt = List.sort (String.compare) %> String.concat ", " in
      Printf.ksprintf (print_endline) "-old-> %s\n-new-> %s"
        (fmt old.tags) (fmt knew.tags)
    end;
    chk "cms_id" (old.cms_id <> knew.cms_id);
    chk "link" (old.link <> knew.link);
    chk "custom fields" cfields;
    if cfields then 
      (prtf "old vid.fields" old.custom; prtf "new vid.fields" knew.custom);
    chk "canon sameness" (not (Source.are_same old.canonical knew.canonical));
    chk "canonical source" canon;
    if canon then 
      (chk "canonical src.added" (old.canonical.added <> knew.canonical.added);
       prtf "old src.fields" old.canonical.custom;
       prtf "new src.fields" knew.canonical.custom);
    chk "sources" (sources_have_changed old.sources knew.sources)
  end;
  (* At first I tried just comparing update/modified timestamps and the MD5
     of the video file, but because the source may do clean up on the item
     after giving it to the destination, these timestamps are likely to change. 
  *)
     old.title <> knew.title
  || old.slug <> knew.slug
  || old.publish <> knew.publish
  || old.expires <> knew.expires
  (* file_uri and thumbnail_uri are not checked as they are changed to the
     local URI when they're saved *)
  (* filename is not checked, as the name stored in the database is based on
     the name of the file saved. This may have extra data attached and may not
     be taken exactly from what is passed from the source. *)
  (* md5 may not want to be checked if it's not based on the file. For example,
     with JW videos can just be URLs to a video file. In that case, the MD5
     is generated from the URL of the file, not the file itself and will
     always be different from the MD5 generated by this destination. *)
  || check_md5 && old.md5 <> knew.md5
  (* width & height are not checked. Some OVPs don't make the original video
     file available by default, requiring changes to be applied to the asset
     before it can be accessed (JW is like this). This includes information
     about its width and height. We don't want to require that when checking
     if it has changed. The MD5 would change if the width and height had
     changed anyway. *)
  || old.duration <> knew.duration
  || old.description <> knew.description
  || not (Util.items_are_same old.tags knew.tags)
  || old.cms_id <> knew.cms_id
  || old.link <> knew.link
  || not (Util.items_are_same old.custom knew.custom)
  || not (Source.are_same old.canonical knew.canonical)
  || Source.has_changed old.canonical knew.canonical
  || sources_have_changed old.sources knew.sources
